## managed or unmanaged, currently only managed is supported
type: managed

cluster:
  ## The name of the cluster
  name: plural-workload
  ## The version of Kubernetes to deploy
  kubernetesVersion: ""
  ## The cidr blocks for pods
  podCidrBlocks:
    - 192.168.0.0/16 # TODO: shouldn't this also be getting propagated to things like what `.Values.cluster.aws.network.vpc.cidrBlock` is setting?
  ## The cidr blocks for services
  serviceCidrBlocks: [] # TODO: check if we should be setting this

  ##################################
  ###         AWS CLUSTER        ###
  ##################################
  aws:
    ## The region to deploy the cluster to
    region: ""
    ## The name of the ssh key to use for the cluster
    sshKeyName: default
    ## The cluster addons to deploy
    addons:
      - conflictResolution: overwrite
        name: kube-proxy
        version: v1.24.15-eksbuild.2
      - conflictResolution: overwrite
        name: vpc-cni
        version: v1.13.4-eksbuild.1
      - conflictResolution: overwrite
        name: coredns
        version: v1.9.3-eksbuild.6

    network:
    # vpc:
    #   id: ""
    #   cidrBlock: ""
    #   # ipv6: # NOTE: setting `ipv6: {}` will enable ipv6 and auto generate the cidr block. Needed for migration.
    #   #   cidrBlock: ""
    #   #   poolId: ""
    #   #   egressOnlyInternetGatewayId: ""
    #   internetGatewayId: ""
    #   tags: {}
    #   availabilityZoneUsageLimit: 3 # TODO: is set to 3 by default
    #   availabilityZoneSelection: Ordered # TODO: How do we deal with people choosing ones manually in the init flow now? Should we only allow number input and always use ordered for the time being? Set by default to Ordered. Can be Ordered or Random
    # subnets: []
    # # - id: ""
    # #   cidrBlock: ""
    # #   ipv6CidrBlock: ""
    # #   availabilityZone: ""
    # #   isPublic: false
    # #   isIpv6: false
    # #   routeTableId: ""
    # #   natGatewayId: ""
    # #   tags: {}
    # cni:
    #   cniIngressRules: []
    #   # - description: ""
    #   #   fromPort: 0
    #   #   toPort: 0
    #   #   protocol: "" # TODO: find valid values. Can be tcp.
    # securityGroupOverrides: {}
    identityRef: {}
    secondaryCidrBlock: ""
    partition: ""
    roleName: ""
    roleAdditionalPolicies: []
    logging:
      apiServer: false
      audit: false
      authenticator: false
      controllerManager: false
      scheduler: false
    encryptionConfig:
      provider: ""
      resources: []
    additionalTags: {}
    iamAuthenticatorConfig:
      mapRoles: []
      # - rolearn: ""
      #   username: ""
      #   groups: []
      mapUsers: []
      # - userarn: ""
      #   username: ""
      #   groups: []
    endpointAccess:
      public: true
      publicCIDRs: []
      private: false
    bastion:
      enabled: false
      disableIngressRules: false
      allowedCIDRBlocks: []
      instanceType: ""
      ami: ""
    tokenMethod: "" # iam-authenticator
    associateOIDCProvider: true
    oidcIdentityProviderConfig: {}
      # clientId: ""
      # groupsClaim: ""
      # groupsPrefix: ""
      # identityProviderConfigName: ""
      # issuerUrl: ""
      # requiredClaims: {}
      # usernameClaim: ""
      # usernamePrefix: ""
    # tags: {}
    vpcCni:
      disable: false
      env: []
      # - name: ""
      #   value: ""
    kubeProxy:
      disable: false
workers:
  defaults:
    replicas: 0
    labels: { }
    annotations:
      cluster.x-k8s.io/replicas-managed-by: external-autoscaler
    isMultiAZ: false # if false, will create a node group per AZ
    spec:
      amiType: AL2_x86_64 # AL2_x86_64, AL2_x86_64_GPU, AL2_ARM_64
      amiVersion: ""
      capacityType: onDemand # onDemand, spot
      diskSize: 50
      instanceType: t3a.large
      roleName: ""
      scaling:
        maxSize: 5
        minSize: 1
      availabilityZones: [ ]
      subnetIDs: [ ]
      labels: { }
      taints: { }
      updateConfig:
        maxUnavailable: 1
        # maxSurge: 1
      additionalTags: { }
      roleAdditionalPolicies: [ ]
  groups:
    small-burst-spot:
      isMultiAZ: true
      replicas: 1
      spec:
        labels:
          plural.sh/capacityType: SPOT
          plural.sh/performanceType: BURST
          plural.sh/scalingGroup: small-burst-spot
        additionalTags: { } # TODO: allow this to not be set
        capacityType: spot
        scaling:
          maxSize: 27
          minSize: 0
        taints:
          - effect: no-schedule
            key: plural.sh/capacityType
            value: SPOT
        updateConfig:
          maxUnavailable: 1
    medium-burst-spot:
      isMultiAZ: true
      spec:
        labels:
          plural.sh/capacityType: SPOT
          plural.sh/performanceType: BURST
          plural.sh/scalingGroup: medium-burst-spot
        additionalTags: { } # TODO: allow this to not be set
        capacityType: spot
        instanceType: t3.xlarge
        scaling:
          maxSize: 27
          minSize: 0
        taints:
          - effect: no-schedule
            key: plural.sh/capacityType
            value: SPOT
    large-burst-spot:
      isMultiAZ: true
      spec:
        labels:
          plural.sh/capacityType: SPOT
          plural.sh/performanceType: BURST
          plural.sh/scalingGroup: large-burst-spot
        additionalTags: { } # TODO: allow this to not be set
        instanceType: t3.2xlarge
        capacityType: spot
        scaling:
          maxSize: 27
          minSize: 0
        taints:
          - effect: no-schedule
            key: plural.sh/capacityType
            value: SPOT

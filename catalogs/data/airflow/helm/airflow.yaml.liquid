{% raw %}
airflow:
  image:
    repository: apache/airflow # extend and customize this image with your own airflow build to import dags
    tag: 2.8.4-python3.9

  config:
    AIRFLOW__WEBSERVER__BASE_URL: https://{{ configuration.hostname }}
    AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: "s3://{{ configuration.bucket }}/airflow/logs"
    AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True"

    ## dags
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "30"

    ## remote log storage
    AIRFLOW__LOGGING__REMOTE_LOGGING: "True"
    AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: "plural"

  connections:
  - id: plural
    type: aws
    description: connection to aws s3 logs (via workflow identity)

flower:
  enabled: false

web:
  baseUrl: {{ configuration.hostname }}

  externalDatabase:
    type: postgres
    host: {{ imports[configuration.stackName].postgres_host }}
    port: 5432
    database: airflow
    user: airflow
    password: {{ imports[configuration.stackName].postgres_password }}
    # use this for any extra connection-string settings, e.g. ?sslmode=disable
    properties: "?sslmode=allow"


  webserverSecretKey: {{ imports[configuration.stackName].flask_secret | quote }}

  webserverConfig:
    stringOverride: |-
      import base64
      import json
      from airflow import configuration as conf
      from airflow.www.security import AirflowSecurityManager
      from airflow.www.fab_security.manager import AUTH_OAUTH

      AUTH_TYPE = AUTH_OAUTH

      class PluralSecurityManager(AirflowSecurityManager):
          def _get_oauth_user_info(self, provider, response):
              if provider == "plural":
                  jwt = response["id_token"]
                  parts = jwt.split('.')
                  if len(parts) != 3:
                      raise ValueError("Invalid JWT format")

                  payload_b64 = parts[1]
                  
                  # Pad base64 string if necessary
                  padding = '=' * (-len(payload_b64) % 4)
                  payload_b64 += padding
                  payload_json = base64.urlsafe_b64decode(payload_b64).decode('utf-8')
                  me = json.loads(payload_json)

                  split_name = me["name"].split()
                  return {
                      "username": me["email"],
                      "name": me["name"],
                      "first_name": split_name[0],
                      "last_name": " ".join(split_name[1:]),
                      "email": me["email"],
                      "role_keys": [],
                  }
              else:
                  return {}
          oauth_user_info = _get_oauth_user_info

      SECURITY_MANAGER_CLASS = PluralSecurityManager

      # registration configs
      AUTH_USER_REGISTRATION = True  # allow users who are not already in the FAB DB
      AUTH_USER_REGISTRATION_ROLE = "Admin"  # this role will be given in addition to any AUTH_ROLES_MAPPING

      # the list of providers which the user can choose from
      OAUTH_PROVIDERS = [
          {
              'name': 'plural',
              'icon': 'fa-square-p',
              'token_key': 'access_token',
              'remote_app': {
                  'client_id': '{{ imports[configuration.stackName].oidc_client_id }}',
                  'client_secret': '{{ imports[configuration.stackName].oidc_client_secret }}',
                  'api_base_url': 'https://oidc.plural.sh/',
                  'client_kwargs': {
                      'scope': 'openid profile offline_access'
                  },
                  "access_token_url": "https://oidc.plural.sh/oauth2/token",
                  "server_metadata_url": "https://oidc.plural.sh/.well-known/openid-configuration",
                  'redirect_uri': 'https://{{ configuration.hostname }}/oauth-authorized/plural',
                  'authorize_url': 'https://oidc.plural.sh/oauth2/auth'
              }
          }
      ]

      # force users to re-auth after 30min of inactivity (to keep roles in sync)
      PERMANENT_SESSION_LIFETIME = 1800
ingress:
  enabled: true
  web:
    ingressClassName: nginx
    annotations:
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod

    host: {{ configuration.hostname }}

    tls:
      enabled: true
      secretName: airflow-tls

fernetKey: {{ imports[configuration.stackName].fernet_key | quote }}

serviceAccount:
  annotations:
    eks.amazonaws.com/role-arn: "{{ imports[configuration.stackName].logs_role_arn }}"

###################################
## CONFIG | Airflow DAGs
###################################
dags:
  ## the airflow dags folder
  path: /opt/airflow/dags

  ## configs for the dags PVC
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/dags/load-dag-definitions.md
  persistence:
    enabled: false

  ## configs for the git-sync sidecar
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/dags/load-dag-definitions.md
  gitSync:
    enabled: false
{% endraw %}